#!/bin/sh
set -e

usage() {
	echo "usage: $0 [-n keyring-name|-k keyring-file] [-t] [import data]" >&2
	exit 64
}


input=
keyring=
keyring_dir="/etc/apt/keyrings"
name=
trusted=
trusted_dir="/etc/apt/trusted.gpg.d"

while [ $# -gt 0 ]; do
	case "$1" in
		-) input=/dev/stdin ;;
		-f) keyring=$2 ; shift ;;
		-d) keyring_dir=$(cd "$2"; pwd) ; shift ;;
		-n) name=$2 ; shift ;;
		-t) trusted=x ;;
		-h)
			usage
			exit 0
			;;
		-*)
			echo "Invalid argument $1" >&2
			usage
			exit 64
			;;
		--)
			shift
			if [ $# -gt 0 ]; then
				[ "$input" ] && { echo "Invalid input definition '$1': input already set to '$input'." >&2; exit 64; }
				input=$1
			fi
			break
			;;
		*)
			[ "$input" ] && { echo "Invalid input definition '$1': input already set to '$input'." >&2; exit 64; }
			input=$1
			;;
	esac
	shift
done

[ "$input" ] || input="/dev/stdin"

if [ "$keyring" -a "$name" ]; then
	echo "Only -k or -n should be set" >&2
	exit 64
elif [ "$keyring" ]; then
	keyring="${keyring%.gpg}.gpg"
	name=${keyring##*/}
	name=${name%.gpg}
	if [ "$keyring" = "${keyring%/*}" ]; then
		keyring="$PWD/$name.gpg"
	else
		keyring="$(cd "${keyring%/*}"; pwd)/$name.gpg"
	fi
elif [ "$name" ]; then
	name=${name%.gpg}
	name=${name##*/}
	keyring="$keyring_dir/$name.gpg"
elif [ "$input" != "/dev/stdin" ]; then
	case "$input" in
		http*)
			name=$(echo "$input" | sed 's,^https\?://\(\([^:@/]*:\)\?[^@]*@\)\?\([^/:]\+\)\(:[0-9]\+\)\?/.*$,\3,' | tr '/' '_')
			;;
		*)
			name=${input##*/}
			name=${name%.*}
			;;
	esac
	name="$name-archive-keyring"
	keyring="$keyring_dir/$name.gpg"
else
	echo "No name for the keyring. If providing data via stdin, then specify -n or -k." >&2
	exit 64
fi

if [ -e "$keyring" ]; then
	echo "Keyring $keyring already exists. Adding more keys.." >&2
fi

GNUPGHOME=$(mktemp -d -t add-apt-keyring.XXXXXXXX)
trap "rm -rf $GNUPGHOME" EXIT INT TERM
export GNUPGHOME

gpg_() {
	gpg --no-options \
		--homedir "$GNUPGHOME" --no-default-keyring \
		--no-auto-check-trustdb --trustdb-name "$GNUPGHOME/trustdb.gpg" \
		"$@"
}

# Test access (also makes the file a public keyring...)
mkdir -p "${keyring%/*}"
touch "$keyring"

# import public key
case "$input" in
	http*)
		curl -fsSL "$input" \
			| gpg_ --keyring "$keyring" --import - \
			&& rm -f "$keyring~"
		;;
	*)
		gpg_ --keyring "$keyring" --import "$input" \
			&& rm -f "$keyring~"
		;;
esac

# export to get only public keys, to ensure format
gpg_ --keyring "$keyring" --export > "$keyring.tmp" \
	&& mv -f "$keyring.tmp" "$keyring"

echo "Keyring ready: $keyring"

if [ "$trusted" ]; then
	trusted="$trusted_dir/${keyring##*/}"
	ln -vsf "$(realpath --relative-to="$trusted_dir" "$keyring")" "$trusted"
fi
